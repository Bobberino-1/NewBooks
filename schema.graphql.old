schema {
    query: Query
    mutation: Mutation
}

type Book {
    id: ID!
    name: String!
    books: [Book]
}

type BookResult {
    success: Boolean!
    errors: [String]
    book: Book
}

type BooksResult {
    success: Boolean!
    errors: [String]
    books: [Book]
}

type Author {
    id: ID!
    first_name: String
    last_name: String
    books: [Book]
}

type AuthorResult {
    success: Boolean!
    errors: [String]
    author: Author
    books: [Book]
}

type AuthorsResult {
    success: Boolean!
    errors: [String]
    authors: [Author]
    books: [Book]
}

type Publisher {
    id: ID!
    publisher_name: String
    publisher_city: String
    authors: [Author]
    books: [Book]
}

type PublisherResult {
    success: Boolean!
    errors: [String]
    publisher: Publisher
    authors: [Author]
    books: [Book]
}

type PublishersResult {
    success: Boolean!
    errors: [String]
    publishers: [Publisher]
    authors: [Author]
    books: [Book]
}

type DeleteBookResult {
    success: Boolean!
    errors: [String]
}

type DeleteAuthorResult {
    success: Boolean!
    errors: [String]
}

type Query {
    resolve_books_for_publisher(publisher_id: ID!): [Book]
    resolve_book(book_id: ID!): Book
    resolve_books: [Book]
    resolve_author(author_id: ID!): Author
    resolve_authors: [Author]
    resolve_publisher(publisher_id: ID!): Publisher
    resolve_publishers: [Publisher]

    books: BooksResult!
    book(bookId: ID!): BookResult!

    authors: AuthorsResult!
    author(authorId: ID!): AuthorResult!

    publishers: PublishersResult!
    publisher(publisherId: ID!): PublisherResult!
}

type Mutation {
    createBook(name: String, authorId: ID!): BookResult!
    deleteBook(bookId: ID!): DeleteBookResult!
    createAuthor(first_name: String, last_name: String): AuthorResult!
    deleteAuthor(authorId: ID!): DeleteAuthorResult!
    changeAuthorLastName(authorId: ID!, new_last_name: String): AuthorResult!
}
