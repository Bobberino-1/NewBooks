from ariadne import load_schema_from_path, make_executable_schema, \
    graphql_sync, ObjectType, QueryType
from ariadne.constants import PLAYGROUND_HTML
from flask import request, jsonify

from api import app

# resolve_books_for_author_id, \
from api.queries import  \
    resolve_books, resolve_book, \
    resolve_authors, resolve_author, \
    resolve_publishers, resolve_publisher, \
    resolve_books_for_author, \
    resolve_books_for_publisher, \
    resolve_authors_for_publisher, \
    resolve_book_query, \
    resolve_books_query, \
    resolve_author_query, \
    resolve_authors_query, \
    resolve_publisher_query, \
    resolve_publishers_query

# from api.mutations import resolve_create_book, resolve_delete_book, \
#    resolve_create_author, resolve_delete_author, resolve_author_last_name


# binds
query = QueryType()
book = ObjectType("Book")
author = ObjectType("Author")
publisher = ObjectType("Publisher")

author.set_field("books", resolve_books_for_author)

# author.set_field("books", resolve_books_for_author_id)

# query.set_field("resolve_books_for_publisher", resolve_books_for_publisher)
book.set_field("books", resolve_books_for_publisher)

publisher.set_field("authors", resolve_authors_for_publisher)

query.set_field("resolve_book_query", resolve_book_query)
query.set_field("resolve_books_query", resolve_books_query)

query.set_field("resolve_author_query", resolve_author_query)
query.set_field("resolve_authors_query", resolve_authors_query)

query.set_field("resolve_publisher_query", resolve_publisher_query)
query.set_field("resolve_publishers_query", resolve_publishers_query)




query.set_field("book", resolve_book)
query.set_field("books", resolve_books)
query.set_field("author", resolve_author)
query.set_field("authors", resolve_authors)
query.set_field("publisher", resolve_publisher)
query.set_field("publishers", resolve_publishers)

# Mutations
'''
mutation = ObjectType("Mutation")
mutation.set_field("createBook", resolve_create_book)
mutation.set_field("deleteBook", resolve_delete_book)
mutation.set_field("createAuthor", resolve_create_author)
mutation.set_field("deleteAuthor", resolve_delete_author)
mutation.set_field("changeAuthorLastName", resolve_author_last_name)
'''

type_defs = load_schema_from_path("schema.graphql.old")

schema = make_executable_schema(type_defs, [author, book, query, mutation])


@app.route("/graphql", methods=["GET"])
def graphql_playground():
    return PLAYGROUND_HTML, 200


@app.route("/graphql", methods=["POST"])
def graphql_server():
    data = request.get_json()

    success, result = graphql_sync(
        schema,
        data,
        context_value=request,
        debug=app.debug
    )

    print("\nIn main graphql_server: ")
    print("Success is: ", success)
    print("result is: ", result)
    print("\n\n")

    status_code = 200 if success else 400
    return jsonify(result), status_code
